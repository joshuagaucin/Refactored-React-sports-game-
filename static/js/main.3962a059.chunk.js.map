{"version":3,"sources":["assets/images/geese.jpg","assets/images/fox.jpg","assets/images/ducks.jpg","assets/images/wolf.jpg","assets/audio/Bounce.mp3","assets/audio/Swish.mp3","components/team.js","components/scoreboard.js","components/game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Team","props","shotPercentageDiv","stats","shots","shotPercentage","Math","round","score","className","name","src","logo","alt","onClick","shotHandler","ScoreBoard","visitingTeamStats","homeTeamStats","Game","team","teamStatsKey","state","shotSound","play","random","setTimeout","scoreSound","setState","resetGame","resetCount","Audio","this","venue","visitingTeam","logoSrc","homeTeam","React","Component","App","ducks","duckLogo","geese","geeseLogo","foxes","foxLogo","wolves","wolfLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3962a059.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/geese.afb1c94d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fox.e31806dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ducks.b57431db.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wolf.4155ab96.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Bounce.87a0d837.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Swish.6bc36809.mp3\";","import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction Team (props) {\r\n\r\n    let shotPercentageDiv\r\n\r\n    if (props.stats.shots) {\r\n        const shotPercentage = Math.round((props.stats.score / props.stats.shots) * 100)\r\n        shotPercentageDiv = (\r\n            <div>\r\n                <strong>Shooting %: {shotPercentage}</strong>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"Team\">\r\n            <h2>{props.name}</h2>\r\n\r\n            <div className=\"identity\">\r\n                <img src={props.logo} alt={props.name} />\r\n            </div>\r\n\r\n            <div>\r\n                <strong>Shots:</strong> {props.stats.shots}\r\n            </div>\r\n\r\n            <div>\r\n                <strong>Score:</strong> {props.stats.score}\r\n            </div>\r\n            {shotPercentageDiv}\r\n            <button onClick={props.shotHandler}>Shoot!</button>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Team;","import React from 'react';\r\nfunction ScoreBoard(props) {\r\n    return (\r\n        <div className=\"ScoreBoard\">\r\n            <div className=\"teamStats\">\r\n                <h3>VISITORS</h3>\r\n                <h3>{props.visitingTeamStats.score}</h3>\r\n            </div>\r\n\r\n            <h3>SCOREBOARD</h3>\r\n\r\n            <div className=\"teamStats\">\r\n                <h3>HOME</h3>\r\n                <h3>{props.homeTeamStats.score}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ScoreBoard;","import React from 'react';\r\nimport Team from '../components/team';\r\nimport ScoreBoard from '../components/scoreboard';\r\nimport shotSound from '../assets/audio/Bounce.mp3'\r\nimport scoreSound from '../assets/audio/Swish.mp3'\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            resetCount: 0,\r\n            homeTeamStats: {\r\n                shots: 0,\r\n                score: 0\r\n            },\r\n            visitingTeamStats: {\r\n                shots: 0,\r\n                score: 0\r\n            }\r\n        }\r\n        this.scoreSound = new Audio(scoreSound)\r\n\r\n        this.shotSound = new Audio(shotSound)\r\n    }\r\n    shotHandler = (team) => {\r\n\r\n        const teamStatsKey = `${team}TeamStats`\r\n        let score = this.state[teamStatsKey].score\r\n        this.shotSound.play()\r\n\r\n        if (Math.random() > 0.5) {\r\n            score += 1\r\n\r\n            setTimeout(() => {\r\n                this.scoreSound.play()\r\n            }, 100)\r\n        }\r\n\r\n        this.setState((state, props) => ({\r\n            [teamStatsKey]: {\r\n                shots: state[teamStatsKey].shots + 1,\r\n                score\r\n            }\r\n\r\n        }))\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState((state, props) => ({\r\n            resetCount: state.resetCount + 1,\r\n            homeTeamStats: {\r\n                shots: 0,\r\n                score: 0\r\n            },\r\n            visitingTeamStats: {\r\n                shots: 0,\r\n                score: 0\r\n            }\r\n        }))\r\n    }\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"Game\">\r\n                <ScoreBoard\r\n                    visitingTeamStats={this.state.visitingTeamStats}\r\n                    homeTeamStats={this.state.homeTeamStats}\r\n                />\r\n                <h1>Welcome to {this.props.venue}</h1>\r\n                <div className=\"stats\">\r\n                    <Team\r\n                        name={this.props.visitingTeam.name}\r\n                        logo={this.props.visitingTeam.logoSrc}\r\n                        stats={this.state.visitingTeamStats}\r\n                        shotHandler={() => this.shotHandler('visiting')}\r\n                    />\r\n\r\n                    <div className=\"versus\">\r\n                        <h1>VS</h1>\r\n                        <div>\r\n                            <strong>Resets:</strong> {this.state.resetCount}\r\n                            <button onClick={this.resetGame}>Reset Game</button>\r\n                        </div>\r\n                    </div>\r\n                    <Team\r\n                        name={this.props.homeTeam.name}\r\n                        logo={this.props.homeTeam.logoSrc}\r\n                        stats={this.state.homeTeamStats}\r\n                        shotHandler={() => this.shotHandler('home')}\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Game;","import geeseLogo from './assets/images/geese.jpg'\nimport foxLogo from './assets/images/fox.jpg'\nimport duckLogo from './assets/images/ducks.jpg'\nimport wolfLogo from './assets/images/wolf.jpg'\nimport React from 'react';\nimport Game from './components/game';\nimport './App.css';\n\n\n\nfunction App(props) {\n  const ducks = {\n    name: 'ducks',\n    logoSrc: duckLogo\n\n  }\n  const geese = {\n    name: 'geese',\n    logoSrc: geeseLogo\n\n  }\n  const foxes = {\n    name: 'foxes',\n    logoSrc: foxLogo\n\n  }\n  const wolves = {\n    name: 'wolves',\n    logoSrc: wolfLogo\n  }\n  return (\n    <div className=\"App\">\n      <Game\n        venue=\"Union 525 Gem\"\n        homeTeam={ducks}\n        visitingTeam={geese} />\n      <Game\n        venue=\"Sheridan Arena\"\n        homeTeam={wolves}\n        visitingTeam={foxes}\n      />\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}